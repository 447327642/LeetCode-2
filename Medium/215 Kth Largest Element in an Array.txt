public class Solution {
    public int findKthLargest(int[] nums, int k) {
        return kthSelect(nums, k, 0, nums.length - 1);
    }
    
    private int kthSelect(int[] nums, int k, int start, int end) {
        // randomize
        int rand = (int) ((end - start) * Math.random()) + start;
        int temp = nums[rand];
        nums[rand] = nums[start];
        nums[start] = temp;

        int pivot = temp;
        int pointer = start + 1;
        for (int i = start + 1; i <= end; i++) {
            if (nums[i] > pivot) {
                temp = nums[pointer];
                nums[pointer] = nums[i];
                nums[i] = temp;
                pointer += 1;
            }
        }
        temp = nums[pointer - 1];
        nums[pointer - 1] = nums[start];
        nums[start] = temp;

        if (pointer == k) {
            return nums[k - 1];
        } else if (pointer > k) {
            end = pointer - 1;
        } else {
            start = pointer;
        }
        return kthSelect(nums, k, start, end);
    }
}