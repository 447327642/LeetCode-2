/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Iterator<NestedInteger> iterator;
    NestedIterator subIter;
    int nextInt = 0;
    boolean isInt;

    public NestedIterator(List<NestedInteger> nestedList) {
        this.iterator = nestedList.iterator();
        subIter = null;
        isInt = true;
    }

    @Override
    public Integer next() {
        return isInt ? nextInt : subIter.next();
    }

    @Override
    public boolean hasNext() {
        if (!isInt && subIter.hasNext()) {
            return true;
        } else {
            while (iterator.hasNext()) {
                NestedInteger next = iterator.next();
                if (next.isInteger()) {
                    nextInt = next.getInteger();
                    isInt = true;
                    return true;
                } else {
                    subIter = new NestedIterator(next.getList());
                    if (subIter.hasNext()) {
                        isInt = false;
                        return true;
                    }
                }
            }
            return false;
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */