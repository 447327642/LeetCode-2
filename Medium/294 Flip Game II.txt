public class Solution {
    public boolean canWin(String s) {

        // split the strings
        String[] ss = s.split("--*");
        
        // abstract the length of substrings and find the maxLen
        int maxLen = 0;
        for (int i = 0; i < ss.length; i++) {
            if (maxLen < ss[i].length()) {
                maxLen = ss[i].length();
            }
        }
        
        // GS number: 0 -> lose; win otherwise
        List<Integer> gs = new ArrayList<>();
        gs.add(0); // len = 0
        gs.add(0); // len = 1
        gs.add(1); // len = 2
        
        // update GS number
        for (int i = 3; i <= maxLen; i++) {
            buildGS(gs, i);
        }
        
        int result = 0;
        for (String cur : ss) {
            result ^= gs.get(cur.length());
        }

        return result != 0;
    }
    
    private void buildGS(List<Integer> gs, int len) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < len / 2; i++) {
            set.add(gs.get(i) ^ gs.get(len - i - 2));
        }
        for (int i = 0; i < len; i++) {
            if (!set.contains(i)) {
                gs.add(i);
                return;
            }
        }
    }
}