/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        
        int min = 0;
        int max = 0;
        LinkedList<TreeNode> nodes = new LinkedList<>();
        LinkedList<Integer> orders = new LinkedList<>();
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        nodes.add(root);
        orders.add(0);
        while (!nodes.isEmpty()) {
            TreeNode curNode = nodes.poll();
            Integer order = orders.poll();
            map.putIfAbsent(order, new ArrayList<Integer>());
            map.get(order).add(curNode.val);
            TreeNode left = curNode.left;
            if (left != null) {
                nodes.add(left);
                orders.add(order - 1);
                min = Math.min(min, order - 1);
            }
            TreeNode right = curNode.right;
            if (right != null) {
                nodes.add(right);
                orders.add(order + 1);
                max = Math.max(max, order + 1);
            }
        }
        for (int i = min; i <= max; i++) {
            res.add(map.get(i));
        }
        return res;
    }
}