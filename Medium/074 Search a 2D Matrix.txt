public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length < 1) {
            return false;
        }
        int row = searchRow(matrix, target, 0, matrix.length - 1);
        return searchCol(matrix[row], target, 0, matrix[row].length - 1);
    }
    
    private int searchRow(int[][] matrix, int target, int start, int end) {
        while (start < end) {
            int mid = (end - start) / 2 + start;
            if (matrix[mid][0] <= target && matrix[mid][matrix[0].length - 1] >= target) {
                return mid;
            } else if (matrix[mid][0] > target) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
    
    private boolean searchCol(int[] row, int target, int start, int end) {
        while (start < end) {
            int mid = (end - start) / 2 + start;
            if (row[mid] == target) {
                return true;
            } else if (row[mid] > target) {
                end = mid;
            } else {
                start = mid  + 1;
            }
        }
        return row[start] == target;
    }
}