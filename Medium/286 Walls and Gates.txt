public class Solution {
    public void wallsAndGates(int[][] rooms) {
        int INF = 2147483647;
        int x = rooms.length;
        if (x == 0) {
            return;
        }
        int y = rooms[0].length;
        List<Integer> rows = new ArrayList<>();
        List<Integer> cols = new ArrayList<>();
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (rooms[i][j] == 0) {
                    rows.add(i);
                    cols.add(j);
                }
            }
        }
        int dis = 1;
        while (!rows.isEmpty()) {
            List<Integer> tempRows = new ArrayList<>();
            List<Integer> tempCols = new ArrayList<>();
            for (int k = 0; k < rows.size(); k++) {
                int i = rows.get(k);
                int j = cols.get(k);
                if (i > 0 && rooms[i - 1][j] == INF) {
                    rooms[i - 1][j] = dis;
                    tempRows.add(i - 1);
                    tempCols.add(j);
                }
                if (i < x - 1 && rooms[i + 1][j] == INF) {
                    rooms[i + 1][j] = dis;
                    tempRows.add(i + 1);
                    tempCols.add(j);
                }
                if (j > 0 && rooms[i][j - 1] == INF) {
                    rooms[i][j - 1] = dis;
                    tempRows.add(i);
                    tempCols.add(j - 1);
                }
                if (j < y - 1 && rooms[i][j + 1] == INF) {
                    rooms[i][j + 1] = dis;
                    tempRows.add(i);
                    tempCols.add(j + 1);
                }
            }
            rows = tempRows;
            cols = tempCols;
            dis += 1;
        }
    }
}