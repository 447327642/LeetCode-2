public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (edges.length != n - 1) {
            return false;
        }
        int[] roots = new int[n];
        int[] heights = new int[n];
        for (int i = 0; i < n; i++) {
            roots[i] = i;
            heights[i] = 1;
        }
        for (int i = 0; i < edges.length; i++) {
            int[] edge = edges[i];
            int r1 = findRoot(roots, edge[0]);
            int r2 = findRoot(roots, edge[1]);
            if (r1 == r2) {
                return false;
            }
            if (heights[edge[0]] < heights[edge[1]]) {
                roots[r1] = r2;
            } else {
                roots[r2] = r1;
                heights[r2] += 1;
            }
        }
        return true;
    }
    
    private int findRoot(int[] roots, int i) {
        while (i != roots[i]) {
            int temp = roots[i];
            roots[i] = roots[roots[i]];
            i = temp;
        }
        return i;
    }
}